--- a/subprojects/spice-common/common/generated_client_demarshallers.c	2020-08-02 16:38:38.977935710 -0400
+++ b/subprojects/spice-common/common/generated_client_demarshallers.c	2020-08-02 16:37:30.361909113 -0400
@@ -70,10 +70,14 @@
 #define write_int32(ptr, val) ((uint32_unaligned_t *)(ptr))->v = SPICE_BYTESWAP32((uint32_t)val)
 #define read_uint32(ptr) ((uint32_t)SPICE_BYTESWAP32(((uint32_unaligned_t *)(ptr))->v))
 #define write_uint32(ptr, val) ((uint32_unaligned_t *)(ptr))->v = SPICE_BYTESWAP32((uint32_t)val)
-#define read_int64(ptr) ((int64_t)SPICE_BYTESWAP64(((uint64_unaligned_t *)(ptr))->v))
-#define write_int64(ptr, val) ((uint64_unaligned_t *)(ptr))->v = SPICE_BYTESWAP64((uint64_t)val)
-#define read_uint64(ptr) ((uint64_t)SPICE_BYTESWAP64(((uint64_unaligned_t *)(ptr))->v))
-#define write_uint64(ptr, val) ((uint64_unaligned_t *)(ptr))->v = SPICE_BYTESWAP64((uint64_t)val)
+//#define read_int64(ptr) ((int64_t)SPICE_BYTESWAP64(((uint64_unaligned_t *)(ptr))->v))
+//#define write_int64(ptr, val) ((uint64_unaligned_t *)(ptr))->v = SPICE_BYTESWAP64((uint64_t)val)
+//#define read_uint64(ptr) ((uint64_t)SPICE_BYTESWAP64(((uint64_unaligned_t *)(ptr))->v))
+//#define write_uint64(ptr, val) ((uint64_unaligned_t *)(ptr))->v = SPICE_BYTESWAP64((uint64_t)val)
+static inline int64_t read_int64(uint8_t *ptr) { int64_t val; memcpy(&val, SPICE_BYTESWAP64(ptr), sizeof(int64_t)); return val; }
+static inline void write_int64(uint8_t *ptr, int64_t val) { memcpy(SPICE_BYTESWAP64(ptr), &val, sizeof(int64_t)); }
+static inline uint64_t read_uint64(uint8_t *ptr) { uint64_t val; memcpy(&val, SPICE_BYTESWAP64(ptr), sizeof(uint64_t)); return val; }
+static inline void write_uint64(uint8_t *ptr, uint64_t val) { memcpy(SPICE_BYTESWAP64(ptr), &val, sizeof(uint64_t)); }
 #else
 #define read_int16(ptr) (((int16_unaligned_t *)(ptr))->v)
 #define write_int16(ptr, val) (((int16_unaligned_t *)(ptr))->v) = val
@@ -83,10 +87,14 @@
 #define write_int32(ptr, val) (((int32_unaligned_t *)(ptr))->v) = val
 #define read_uint32(ptr) (((uint32_unaligned_t *)(ptr))->v)
 #define write_uint32(ptr, val) (((uint32_unaligned_t *)(ptr))->v) = val
-#define read_int64(ptr) (((int64_unaligned_t *)(ptr))->v)
-#define write_int64(ptr, val) (((int64_unaligned_t *)(ptr))->v) = val
-#define read_uint64(ptr) (((uint64_unaligned_t *)(ptr))->v)
-#define write_uint64(ptr, val) (((uint64_unaligned_t *)(ptr))->v) = val
+//#define read_int64(ptr) (((int64_unaligned_t *)(ptr))->v)
+//#define write_int64(ptr, val) (((int64_unaligned_t *)(ptr))->v) = val
+//#define read_uint64(ptr) (((uint64_unaligned_t *)(ptr))->v)
+//#define write_uint64(ptr, val) (((uint64_unaligned_t *)(ptr))->v) = val
+static inline int64_t read_int64(uint8_t *ptr) { int64_t val; memcpy(&val, ptr, sizeof(int64_t)); return val; }
+static inline void write_int64(uint8_t *ptr, int64_t val) { memcpy(ptr, &val, sizeof(int64_t)); }
+static inline uint64_t read_uint64(uint8_t *ptr) { uint64_t val; memcpy(&val, ptr, sizeof(uint64_t)); return val; }
+static inline void write_uint64(uint8_t *ptr, uint64_t val) { memcpy(ptr, &val, sizeof(uint64_t)); }
 #endif
 
 static int8_t SPICE_GNUC_UNUSED consume_int8(uint8_t **ptr)
--- a/subprojects/spice-common/common/marshaller.c	2019-05-16 04:47:17.000000000 -0400
+++ b/subprojects/spice-common/common/marshaller.c.patched	2020-08-02 16:52:48.553815657 -0400
@@ -62,15 +62,25 @@
 #define write_uint16(ptr,v) (((uint16_unaligned_t *)(ptr))->val = SPICE_BYTESWAP16((uint16_t)(v)))
 #define write_int32(ptr,v) (((uint32_unaligned_t *)(ptr))->val = SPICE_BYTESWAP32((uint32_t)(v)))
 #define write_uint32(ptr,v) (((uint32_unaligned_t *)(ptr))->val = SPICE_BYTESWAP32((uint32_t)(v)))
-#define write_int64(ptr,v) (((uint64_unaligned_t *)(ptr))->val = SPICE_BYTESWAP64((uint64_t)(v)))
-#define write_uint64(ptr,v) (((uint64_unaligned_t *)(ptr))->val = SPICE_BYTESWAP64((uint64_t)(v)))
+//#define write_int64(ptr,v) (((uint64_unaligned_t *)(ptr))->val = SPICE_BYTESWAP64((uint64_t)(v)))
+//#define write_uint64(ptr,v) (((uint64_unaligned_t *)(ptr))->val = SPICE_BYTESWAP64((uint64_t)(v)))
+static inline void write_int64(uint8_t *ptr, int64_t val) { memcpy(SPICE_BYTESWAP64(ptr), &val, sizeof(int64_t)); }
+static inline void write_uint64(uint8_t *ptr, uint64_t val) { memcpy(SPICE_BYTESWAP64(ptr), &val, sizeof(uint64_t)); }
 #else
 #define write_int16(ptr,v) (((int16_unaligned_t *)(ptr))->val = v)
 #define write_uint16(ptr,v) (((uint16_unaligned_t *)(ptr))->val = v)
 #define write_int32(ptr,v) (((int32_unaligned_t *)(ptr))->val = v)
 #define write_uint32(ptr,v) (((uint32_unaligned_t *)(ptr))->val = v)
-#define write_int64(ptr,v) (((int64_unaligned_t *)(ptr))->val = v)
-#define write_uint64(ptr,v) (((uint64_unaligned_t *)(ptr))->val = v)
+//#define write_int64(ptr,v) (((int64_unaligned_t *)(ptr))->val = v)
+//#define write_uint64(ptr,v) (((uint64_unaligned_t *)(ptr))->val = v)
+/*
+ * Thanks to shohyanglim@gmail.com for saving me time and discovering these
+ * hacks to avoid SIGBUS on some ARM processors.
+ *
+ * TODO: Find out whether something better can be done to avoid the SIGBUS.
+ */
+static inline void write_int64(uint8_t *ptr, int64_t val) { memcpy(ptr, &val, sizeof(int64_t)); }
+static inline void write_uint64(uint8_t *ptr, uint64_t val) { memcpy(ptr, &val, sizeof(uint64_t)); }
 #endif
 
 typedef struct {
